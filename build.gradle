/* Javalette Compiler, a simple C like language.
 - Copyright, 2016, BjÃ¶rn Tropf, Mazdak Farrokhzad
 -
 - This program is free software; you can redistribute it and/or
 - modify it under the terms of the GNU General Public License
 - as published by the Free Software Foundation; either version 2
 - of the License, or (at your option) any later version.
 -
 - This program is distributed in the hope that it will be useful,
 - but WITHOUT ANY WARRANTY; without even the implied warranty of
 - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 - GNU General Public License for more details.
 -
 - You should have received a copy of the GNU General Public License
 - along with this program; if not, write to the Free Software
 - Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

import org.apache.tools.ant.taskdefs.condition.Os
def isWin() { Os.isFamily(Os.FAMILY_WINDOWS) }

def cabalTask(proj, target) {
    proj.tasks.create(name: 'cabal' + target, type: Exec) {
        description "Executes cabal build for project"
        commandLine 'cabal', target
    }
}

subprojects { p ->
    cabalTask(p, 'build')
    cabalTask(p, 'clean')
}

project(':src') { p ->
    task bnfcClean(type: Delete) {
        description "Cleans up BNFC build."
        delete 'Javalette'
    }
    task alex(type: Exec)  {
        description "Runs alex on BNFC build."
        commandLine "happy", "-gca", "Par.y"
    }
    task happy(type: Exec) {
        description "Runs happy on BNFC build."
        commandLine "alex", "-g", "Lex.x"
    }
    task bnfc(type: Exec ) {
        doFirst { bnfcClean.execute() }
        description "Runs BNFC on contrib/Javalette.cf"
        commandLine "bnfc", "-d", "--functor", "contrib/Javalette.cf"
        finalizedBy alex, happy
    }
    [alex, happy].each { it.workingDir new File(p.projectDir, "Javalette") }
/*
	[bnfcClean, bnfc, alex, happy].each { 
        it.inputs.file "contrib/Javalette.cf"
        it.outputs.file file("Javalette")
    }
*/
    task build(type: Copy) {
        description "Builds compiler sources into jlc program."
        dependsOn cabalbuild, bnfc
        from('./dist/build/jlc')
        into('../submission/')
        include('jlc' + (isWin() ? '.exe' : ''))
    }

    task clean(type: Delete) {
        dependsOn cabalclean, bnfcClean
        description "Cleans up compiled jlc program."
        delete '../submission/jlc', '../submission/jlc.exe'
    }
}

project(':grade') { p ->
    task build(type: Copy, dependsOn: cabalbuild) {
        description "Builds grader program."
        from('./dist/build/Grade')
        into('./')
        include('Grade' + (isWin() ? '.exe' : ''))
    }

    task clean(type: Delete, dependsOn: cabalclean) {
        description "Cleans up built grader program."
        delete 'Grade', 'Grade.exe', "../submission/graderTestSuite"
    }

    task run(type: Exec) {
        dependsOn build, ':src:build'
        description "Runs grader program for jlc."
        if ( isWin() )
            commandLine file("Grade.exe"), "-s", "jlc.exe", ".", "../submission"
        else
            commandLine "./Grade", ".", "../submission"
    }
}

task clean(type: Delete) {
    description "Cleans up everything."
    dependsOn ":grade:clean", ":src:clean"
    delete "submission"
}

task check() {
    description "Runs all tests and checks that everything works."
    dependsOn ':src:build', ':grade:run'
}

task build(dependsOn: check) {
    description "Builds everything."
}
