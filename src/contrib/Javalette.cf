-- programs ------------------------------------------------

entrypoints Program ;
Program.    Program ::= [TopDef] ;

TClassDef.  TopDef ::= ClassDef ;
TStructDef. TopDef ::= StructDef ;
TTypeDef.   TopDef ::= TypeDef ;
TFnDef.     TopDef ::= FnDef ;

separator nonempty TopDef "" ;

-- classes -------------------------------------------------

ClassDef.  ClassDef ::= "class" Ident ClassHierarchy "{" [ClassPart] "}" ;

MethodDef. ClassPart ::= FnDef ;
ClassProp. ClassPart ::= SField ";" ;
separator  ClassPart "" ;

HExtend.   ClassHierarchy ::= "extends" Ident ;
HBase.     ClassHierarchy ::= ;

-- structs -------------------------------------------------

StructDef. StructDef ::= "struct" Ident "{" [SField] "}" ";" ;

SField.    SField ::= Type Ident ;
terminator SField ";" ;

-- typedefs ------------------------------------------------

TypeDef.   TypeDef ::= "typedef" Type Ident ";" ;

-- functions -----------------------------------------------

FnDef.     FnDef ::= Type Ident "(" [Arg] ")" Block ;

Arg.       Arg ::= Type Ident ;
separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;
separator nonempty Item "," ;

Assign.    Stmt ::= LValue "=" Expr ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt ;

-- shift reduce!
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;
Doub.      Type ::= "double" ;
Bool.      Type ::= "boolean" ;
Void.      Type ::= "void" ;
-- shift reduce!
Array.     Type ::= Type [DimT] ;
TStruct.   Type ::= "struct" Ident "*" ;
TRef.      Type ::= Ident ;

internal   ConstStr. Type ::= "String" ;
internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

DimenT.    DimT ::= "[]" ;
separator  nonempty DimT "" ;

-- L-Values ------------------------------------------------

LValueV.   LValue ::= Ident [DimE] ;
LValueS.   LValue ::= Ident [DimE] "->" LValue ;
LValueS.   LValue ::= Ident [DimE] "."  LValue ;

-- Expressions ---------------------------------------------

-- shift reduce!
ECastNullX. Expr7 ::= "(" Ident              ")" "null" ;
ECastNullA. Expr7 ::= "(" Type [DimT]        ")" "null" ;
ECastNullS. Expr7 ::= "(" "struct" Ident "*" ")" "null" ;

ENew.      Expr6 ::= "new" Type [DimE] ;
EVar.      Expr6 ::= LValue ;

ELitInt.   Expr6 ::= Integer ;
ELitDoub.  Expr6 ::= Double;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
EString.   Expr6 ::= String ;

-- in a real language, this would probably be Expr6 instead of LValue.
EApp.      Expr6 ::= LValue "(" [Expr] ")" ;

Incr.      Expr6 ::= LValue "++" ;
Decr.      Expr6 ::= LValue "--" ;
PreIncr.   Expr6 ::= "++" LValue ;
PreDecr.   Expr6 ::= "--" LValue ;

Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr  ::= Expr1 "||" Expr ;

coercions  Expr 7 ;
separator  Expr "," ;

DimenE.    DimE ::= "[" Expr "]" ;
separator  DimE "" ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;